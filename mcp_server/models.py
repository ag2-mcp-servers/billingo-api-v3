# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:15:23+00:00

from __future__ import annotations

from datetime import date as date_aliased
from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class ClientError(BaseModel):
    message: Optional[str] = None


class ClientErrorResponse(BaseModel):
    error: Optional[ClientError] = None


class Country(Enum):
    field_ = ''
    AC = 'AC'
    AD = 'AD'
    AE = 'AE'
    AF = 'AF'
    AG = 'AG'
    AI = 'AI'
    AL = 'AL'
    AM = 'AM'
    AO = 'AO'
    AQ = 'AQ'
    AR = 'AR'
    AS = 'AS'
    AT = 'AT'
    AU = 'AU'
    AW = 'AW'
    AX = 'AX'
    AZ = 'AZ'
    BA = 'BA'
    BB = 'BB'
    BD = 'BD'
    BE = 'BE'
    BF = 'BF'
    BG = 'BG'
    BH = 'BH'
    BI = 'BI'
    BJ = 'BJ'
    BL = 'BL'
    BM = 'BM'
    BN = 'BN'
    BO = 'BO'
    BQ = 'BQ'
    BR = 'BR'
    BS = 'BS'
    BT = 'BT'
    BW = 'BW'
    BY = 'BY'
    BZ = 'BZ'
    CA = 'CA'
    CC = 'CC'
    CD = 'CD'
    CF = 'CF'
    CG = 'CG'
    CH = 'CH'
    CI = 'CI'
    CK = 'CK'
    CL = 'CL'
    CM = 'CM'
    CN = 'CN'
    CO = 'CO'
    CR = 'CR'
    CU = 'CU'
    CV = 'CV'
    CW = 'CW'
    CX = 'CX'
    CY = 'CY'
    CZ = 'CZ'
    DE = 'DE'
    DG = 'DG'
    DJ = 'DJ'
    DK = 'DK'
    DM = 'DM'
    DO = 'DO'
    DZ = 'DZ'
    EA = 'EA'
    EC = 'EC'
    EE = 'EE'
    EG = 'EG'
    EH = 'EH'
    ER = 'ER'
    ES = 'ES'
    ET = 'ET'
    FI = 'FI'
    FJ = 'FJ'
    FK = 'FK'
    FM = 'FM'
    FO = 'FO'
    FR = 'FR'
    GA = 'GA'
    GB = 'GB'
    GD = 'GD'
    GE = 'GE'
    GF = 'GF'
    GG = 'GG'
    GH = 'GH'
    GI = 'GI'
    GL = 'GL'
    GM = 'GM'
    GN = 'GN'
    GP = 'GP'
    GQ = 'GQ'
    GR = 'GR'
    GS = 'GS'
    GT = 'GT'
    GU = 'GU'
    GW = 'GW'
    GY = 'GY'
    HK = 'HK'
    HN = 'HN'
    HR = 'HR'
    HT = 'HT'
    HU = 'HU'
    IC = 'IC'
    ID = 'ID'
    IE = 'IE'
    IL = 'IL'
    IM = 'IM'
    IN = 'IN'
    IO = 'IO'
    IQ = 'IQ'
    IR = 'IR'
    IS = 'IS'
    IT = 'IT'
    JE = 'JE'
    JM = 'JM'
    JO = 'JO'
    JP = 'JP'
    KE = 'KE'
    KG = 'KG'
    KH = 'KH'
    KI = 'KI'
    KM = 'KM'
    KN = 'KN'
    KP = 'KP'
    KR = 'KR'
    KW = 'KW'
    KY = 'KY'
    KZ = 'KZ'
    LA = 'LA'
    LB = 'LB'
    LC = 'LC'
    LI = 'LI'
    LK = 'LK'
    LR = 'LR'
    LS = 'LS'
    LT = 'LT'
    LU = 'LU'
    LV = 'LV'
    LY = 'LY'
    MA = 'MA'
    MC = 'MC'
    MD = 'MD'
    ME = 'ME'
    MF = 'MF'
    MG = 'MG'
    MH = 'MH'
    MK = 'MK'
    ML = 'ML'
    MM = 'MM'
    MN = 'MN'
    MO = 'MO'
    MP = 'MP'
    MQ = 'MQ'
    MR = 'MR'
    MS = 'MS'
    MT = 'MT'
    MU = 'MU'
    MV = 'MV'
    MW = 'MW'
    MX = 'MX'
    MY = 'MY'
    MZ = 'MZ'
    NA = 'NA'
    NC = 'NC'
    NE = 'NE'
    NF = 'NF'
    NG = 'NG'
    NI = 'NI'
    NL = 'NL'
    NO = 'NO'
    NP = 'NP'
    NR = 'NR'
    NU = 'NU'
    NZ = 'NZ'
    OM = 'OM'
    PA = 'PA'
    PE = 'PE'
    PF = 'PF'
    PG = 'PG'
    PH = 'PH'
    PK = 'PK'
    PL = 'PL'
    PM = 'PM'
    PN = 'PN'
    PR = 'PR'
    PS = 'PS'
    PT = 'PT'
    PW = 'PW'
    PY = 'PY'
    QA = 'QA'
    RE = 'RE'
    RO = 'RO'
    RS = 'RS'
    RU = 'RU'
    RW = 'RW'
    SA = 'SA'
    SB = 'SB'
    SC = 'SC'
    SD = 'SD'
    SE = 'SE'
    SG = 'SG'
    SH = 'SH'
    SI = 'SI'
    SJ = 'SJ'
    SK = 'SK'
    SL = 'SL'
    SM = 'SM'
    SN = 'SN'
    SO = 'SO'
    SR = 'SR'
    SS = 'SS'
    ST = 'ST'
    SV = 'SV'
    SX = 'SX'
    SY = 'SY'
    SZ = 'SZ'
    TA = 'TA'
    TC = 'TC'
    TD = 'TD'
    TF = 'TF'
    TG = 'TG'
    TH = 'TH'
    TJ = 'TJ'
    TK = 'TK'
    TL = 'TL'
    TM = 'TM'
    TN = 'TN'
    TO = 'TO'
    TR = 'TR'
    TT = 'TT'
    TV = 'TV'
    TW = 'TW'
    TZ = 'TZ'
    UA = 'UA'
    UG = 'UG'
    UM = 'UM'
    US = 'US'
    UY = 'UY'
    UZ = 'UZ'
    VA = 'VA'
    VC = 'VC'
    VE = 'VE'
    VG = 'VG'
    VI = 'VI'
    VN = 'VN'
    VU = 'VU'
    WF = 'WF'
    WS = 'WS'
    XA = 'XA'
    XB = 'XB'
    XK = 'XK'
    YE = 'YE'
    YT = 'YT'
    ZA = 'ZA'
    ZM = 'ZM'
    ZW = 'ZW'


class Currency(Enum):
    AUD = 'AUD'
    BGN = 'BGN'
    BRL = 'BRL'
    CAD = 'CAD'
    CHF = 'CHF'
    CNY = 'CNY'
    CZK = 'CZK'
    DKK = 'DKK'
    EUR = 'EUR'
    GBP = 'GBP'
    HKD = 'HKD'
    HRK = 'HRK'
    HUF = 'HUF'
    IDR = 'IDR'
    ILS = 'ILS'
    INR = 'INR'
    ISK = 'ISK'
    JPY = 'JPY'
    KRW = 'KRW'
    LTL = 'LTL'
    LVL = 'LVL'
    MXN = 'MXN'
    MYR = 'MYR'
    NOK = 'NOK'
    NZD = 'NZD'
    PHP = 'PHP'
    PLN = 'PLN'
    RON = 'RON'
    RSD = 'RSD'
    RUB = 'RUB'
    SEK = 'SEK'
    SGD = 'SGD'
    THB = 'THB'
    TRY = 'TRY'
    UAH = 'UAH'
    USD = 'USD'
    ZAR = 'ZAR'


class DocumentBankAccount(BaseModel):
    account_number: str
    account_number_iban: Optional[str] = None
    id: Optional[int] = None
    name: str
    swift: Optional[str] = None


class DocumentBlock(BaseModel):
    custom_field1: Optional[str] = None
    custom_field2: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None
    prefix: Optional[str] = None


class DocumentBlockList(BaseModel):
    current_page: Optional[int] = None
    data: Optional[List[DocumentBlock]] = None
    last_page: Optional[int] = None
    next_page_url: Optional[str] = None
    per_page: Optional[int] = None
    prev_page_url: Optional[str] = None
    total: Optional[int] = None


class DocumentInsertType(Enum):
    advance = 'advance'
    draft = 'draft'
    invoice = 'invoice'
    proforma = 'proforma'


class DocumentItemData(BaseModel):
    product_id: int
    quantity: float


class DocumentLanguage(Enum):
    de = 'de'
    en = 'en'
    fr = 'fr'
    hr = 'hr'
    hu = 'hu'
    it = 'it'
    ro = 'ro'
    sk = 'sk'


class DocumentNotificationStatus(Enum):
    closed = 'closed'
    downloaded = 'downloaded'
    failed = 'failed'
    none = 'none'
    opened = 'opened'
    readed = 'readed'


class DocumentPublicUrl(BaseModel):
    public_url: Optional[str] = None


class DocumentType(Enum):
    advance = 'advance'
    canceled = 'canceled'
    cancellation = 'cancellation'
    draft = 'draft'
    invoice = 'invoice'
    proforma = 'proforma'


class DocumentVatRateSummary(BaseModel):
    vat_name: Optional[str] = None
    vat_percentage: Optional[float] = None
    vat_rate_gross_amount: Optional[float] = None
    vat_rate_net_amount: Optional[float] = None
    vat_rate_vat_amount: Optional[float] = None
    vat_rate_vat_amount_local: Optional[float] = None


class Id(BaseModel):
    id: Optional[int] = None
    legacy_id: Optional[int] = None


class OnlinePayment(Enum):
    field_ = ''
    Barion = 'Barion'
    SimplePay = 'SimplePay'
    no = 'no'


class OnlineSzamlaStatusMessage(BaseModel):
    human_readable_message: Optional[str] = None
    validation_error_code: Optional[str] = None
    validation_result_code: Optional[str] = None


class OrganizationData(BaseModel):
    tax_code: Optional[str] = None


class PaymentMethod(Enum):
    aruhitel = 'aruhitel'
    bankcard = 'bankcard'
    barion = 'barion'
    barter = 'barter'
    cash = 'cash'
    cash_on_delivery = 'cash_on_delivery'
    coupon = 'coupon'
    elore_utalas = 'elore_utalas'
    ep_kartya = 'ep_kartya'
    kompenzacio = 'kompenzacio'
    levonas = 'levonas'
    online_bankcard = 'online_bankcard'
    payoneer = 'payoneer'
    paypal = 'paypal'
    paypal_utolag = 'paypal_utolag'
    payu = 'payu'
    pick_pack_pont = 'pick_pack_pont'
    postai_csekk = 'postai_csekk'
    postautalvany = 'postautalvany'
    skrill = 'skrill'
    szep_card = 'szep_card'
    transferwise = 'transferwise'
    upwork = 'upwork'
    utalvany = 'utalvany'
    valto = 'valto'
    wire_transfer = 'wire_transfer'


class PaymentStatus(Enum):
    expired = 'expired'
    none = 'none'
    outstanding = 'outstanding'
    paid = 'paid'
    partially_paid = 'partially_paid'


class Round(Enum):
    five = 'five'
    none = 'none'
    one = 'one'
    ten = 'ten'


class SendDocument(BaseModel):
    emails: Optional[List[str]] = None


class ServerError(BaseModel):
    message: Optional[str] = None
    trace_id: Optional[str] = Field(
        None, description='You should send us this ID to investigate the issue.'
    )


class ServerErrorResponse(BaseModel):
    error: Optional[ServerError] = None


class UnitPriceType(Enum):
    gross = 'gross'
    net = 'net'


class ValidationError(BaseModel):
    field: Optional[str] = None
    message: Optional[str] = None


class ValidationErrorResponse(BaseModel):
    errors: Optional[List[ValidationError]] = None
    message: Optional[str] = None


class Vat(Enum):
    field_0_ = '0%'
    field_1_ = '1%'
    field_10_ = '10%'
    field_11_ = '11%'
    field_12_ = '12%'
    field_13_ = '13%'
    field_14_ = '14%'
    field_15_ = '15%'
    field_16_ = '16%'
    field_17_ = '17%'
    field_18_ = '18%'
    field_19_ = '19%'
    field_2_ = '2%'
    field_20_ = '20%'
    field_21_ = '21%'
    field_22_ = '22%'
    field_23_ = '23%'
    field_24_ = '24%'
    field_25_ = '25%'
    field_26_ = '26%'
    field_27_ = '27%'
    field_3_ = '3%'
    field_4_ = '4%'
    field_5_ = '5%'
    field_6_ = '6%'
    field_7_ = '7%'
    field_8_ = '8%'
    field_9_ = '9%'
    AAM = 'AAM'
    AM = 'AM'
    EU = 'EU'
    EUK = 'EUK'
    F_AFA = 'F.AFA'
    FAD = 'FAD'
    K_AFA = 'K.AFA'
    MAA = 'MAA'
    TAM = 'TAM'
    ÁKK = 'ÁKK'
    ÁTHK = 'ÁTHK'


class Address(BaseModel):
    address: str
    city: str
    country_code: Country
    post_code: str


class BankAccount(BaseModel):
    account_number: str
    account_number_iban: Optional[str] = None
    currency: Currency
    id: Optional[int] = None
    name: str
    need_qr: Optional[bool] = 'false'
    swift: Optional[str] = None


class BankAccountList(BaseModel):
    current_page: Optional[int] = None
    data: Optional[List[BankAccount]] = None
    last_page: Optional[int] = None
    next_page_url: Optional[str] = None
    per_page: Optional[int] = None
    prev_page_url: Optional[str] = None
    total: Optional[int] = None


class ConversationRate(BaseModel):
    conversation_rate: Optional[float] = None
    from_currency: Optional[Currency] = None
    to_currency: Optional[Currency] = None


class DocumentItem(BaseModel):
    gross_amount: Optional[float] = None
    name: Optional[str] = None
    net_amount: Optional[float] = None
    net_unit_amount: Optional[float] = None
    product_id: Optional[int] = None
    quantity: Optional[float] = None
    vat: Optional[Vat] = None
    vat_amount: Optional[float] = None


class DocumentOrganization(BaseModel):
    address: Optional[Address] = None
    bank_account: Optional[DocumentBankAccount] = None
    cash_settled: Optional[bool] = None
    eu_tax_number: Optional[str] = None
    ev_number: Optional[str] = None
    name: Optional[str] = None
    small_taxpayer: Optional[bool] = None
    tax_number: Optional[str] = None


class DocumentProductData(BaseModel):
    comment: Optional[str] = None
    name: str
    quantity: float
    unit: str
    unit_price: float
    unit_price_type: UnitPriceType
    vat: Vat


class DocumentSettings(BaseModel):
    mediated_service: Optional[bool] = False
    online_payment: Optional[OnlinePayment] = None
    place_id: Optional[int] = None
    round: Optional[Round] = None
    without_financial_fulfillment: Optional[bool] = False


class DocumentSummary(BaseModel):
    gross_amount_local: Optional[float] = None
    net_amount: Optional[float] = None
    net_amount_local: Optional[float] = None
    vat_amount: Optional[float] = None
    vat_amount_local: Optional[float] = None
    vat_rate_summary: Optional[List[DocumentVatRateSummary]] = None


class OnlineSzamlaStatus(BaseModel):
    messages: Optional[List[OnlineSzamlaStatusMessage]] = None
    status: Optional[str] = None
    transaction_id: Optional[str] = None


class PartnerUpsert(BaseModel):
    account_number: Optional[str] = None
    address: Address
    emails: Optional[List[str]] = None
    general_ledger_number: Optional[str] = None
    iban: Optional[str] = None
    name: str
    phone: Optional[str] = None
    swift: Optional[str] = None
    taxcode: Optional[str] = None


class PaymentHistory(BaseModel):
    conversion_rate: Optional[float] = None
    date: date_aliased
    payment_method: PaymentMethod
    price: float
    voucher_number: Optional[str] = None


class Product(BaseModel):
    comment: Optional[str] = None
    currency: Currency
    general_ledger_number: Optional[str] = None
    general_ledger_taxcode: Optional[str] = None
    id: Optional[int] = None
    name: str
    net_unit_price: Optional[float] = None
    unit: str
    vat: Vat


class ProductList(BaseModel):
    current_page: Optional[int] = None
    data: Optional[List[Product]] = None
    last_page: Optional[int] = None
    next_page_url: Optional[str] = None
    per_page: Optional[int] = None
    prev_page_url: Optional[str] = None
    total: Optional[int] = None


class DocumentsIdPaymentsDeleteResponse(RootModel[List[PaymentHistory]]):
    root: List[PaymentHistory]


class DocumentsIdPaymentsGetResponse(RootModel[List[PaymentHistory]]):
    root: List[PaymentHistory]


class DocumentsIdPaymentsPutRequest(RootModel[List[PaymentHistory]]):
    root: List[PaymentHistory]


class DocumentsIdPaymentsPutResponse(RootModel[List[PaymentHistory]]):
    root: List[PaymentHistory]


class DocumentInsert(BaseModel):
    bank_account_id: Optional[int] = None
    block_id: int
    comment: Optional[str] = None
    conversion_rate: Optional[float] = '1'
    currency: Currency
    due_date: date_aliased
    electronic: Optional[bool] = False
    fulfillment_date: date_aliased
    items: Optional[List[Union[DocumentItemData, DocumentProductData]]] = None
    language: DocumentLanguage
    paid: Optional[bool] = False
    partner_id: int
    payment_method: PaymentMethod
    settings: Optional[DocumentSettings] = None
    type: DocumentInsertType
    vendor_id: Optional[str] = None


class Partner(PartnerUpsert):
    id: Optional[int] = None


class PartnerList(BaseModel):
    current_page: Optional[int] = None
    data: Optional[List[Partner]] = None
    last_page: Optional[int] = None
    next_page_url: Optional[str] = None
    per_page: Optional[int] = None
    prev_page_url: Optional[str] = None
    total: Optional[int] = None


class Document(BaseModel):
    block_id: Optional[int] = Field(None, description="DocumentBlock's identifier.")
    cancelled: Optional[bool] = None
    comment: Optional[str] = None
    conversion_rate: Optional[float] = None
    currency: Optional[Currency] = None
    due_date: Optional[date_aliased] = None
    electronic: Optional[bool] = None
    fulfillment_date: Optional[date_aliased] = None
    gross_total: Optional[float] = Field(
        None, description="The document's gross total price."
    )
    id: Optional[int] = Field(None, description="The document's unique identifier.")
    invoice_date: Optional[date_aliased] = None
    invoice_number: Optional[str] = Field(
        None,
        description="The document's invoice number.",
        examples=['PREFIX / 2020-000001'],
    )
    items: Optional[List[DocumentItem]] = None
    language: Optional[DocumentLanguage] = None
    notification_status: Optional[DocumentNotificationStatus] = None
    organization: Optional[DocumentOrganization] = None
    paid_date: Optional[date_aliased] = None
    partner: Optional[Partner] = None
    payment_method: Optional[PaymentMethod] = None
    payment_status: Optional[PaymentStatus] = None
    settings: Optional[DocumentSettings] = None
    summary: Optional[DocumentSummary] = None
    tags: Optional[List[str]] = None
    type: Optional[DocumentType] = None


class DocumentList(BaseModel):
    current_page: Optional[int] = None
    data: Optional[List[Document]] = None
    last_page: Optional[int] = None
    next_page_url: Optional[str] = None
    per_page: Optional[int] = None
    prev_page_url: Optional[str] = None
    total: Optional[int] = None
