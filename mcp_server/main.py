# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:15:23+00:00



import argparse
import json
import os
from datetime import date as date_aliased
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Query
from pydantic import conint

from models import (
    BankAccount,
    BankAccountList,
    ClientError,
    ClientErrorResponse,
    ConversationRate,
    Currency,
    Document,
    DocumentBlockList,
    DocumentInsert,
    DocumentList,
    DocumentPublicUrl,
    DocumentsIdPaymentsDeleteResponse,
    DocumentsIdPaymentsGetResponse,
    DocumentsIdPaymentsPutRequest,
    DocumentsIdPaymentsPutResponse,
    Id,
    OnlineSzamlaStatus,
    OrganizationData,
    Partner,
    PartnerList,
    PartnerUpsert,
    PaymentMethod,
    PaymentStatus,
    Product,
    ProductList,
    SendDocument,
    ServerErrorResponse,
    ValidationErrorResponse,
)

app = MCPProxy(
    contact={
        'email': 'hello@billingo.hu',
        'name': 'Billingo Support',
        'url': 'https://www.billingo.hu/kapcsolat',
    },
    description='This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.',
    termsOfService='https://www.billingo.hu/felhasznalasi-feltetelek',
    title='Billingo API v3',
    version='3.0.7',
    servers=[{'description': 'Billingo API', 'url': 'https://api.billingo.hu/v3'}],
)


@app.get(
    '/bank-accounts',
    description=""" Returns a list of your bank accounts. The bank accounts are returned sorted by creation date, with the most recent bank account appearing first. """,
    tags=['bank_account_operations'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def list_bank_account(
    page: Optional[int] = '1', per_page: Optional[conint(ge=1, le=100)] = 25
):
    """
    List all bank account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/bank-accounts',
    description=""" Create a new bank account. Returns a bank account object if the create is succeded. """,
    tags=['bank_account_operations'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def create_bank_account(body: BankAccount):
    """
    Create a bank account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/bank-accounts/{id}',
    description=""" Delete an existing bank account. """,
    tags=['bank_account_operations'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def delete_bank_account(id: int):
    """
    Delete a bank account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/bank-accounts/{id}',
    description=""" Retrieves the details of an existing bank account. """,
    tags=['bank_account_operations'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def get_bank_account(id: int):
    """
    Retrieve a bank account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/bank-accounts/{id}',
    description=""" Update an existing bank accounts. Returns a bank account object if the update is succeded. """,
    tags=['bank_account_operations'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def update_bank_account(id: int, body: BankAccount = ...):
    """
    Update a bank account
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/currencies',
    description=""" Return with the exchange value of given currencies. """,
    tags=['currency_exchange_rates'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def get_conversion_rate(from_: Currency = Query(..., alias='from'), to: Currency = ...):
    """
    Get currencies exchange rate.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/document-blocks',
    description=""" Returns a list of your document blocks. The document blocks are returned sorted by creation date, with the most recent document blocks appearing first. """,
    tags=['document_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def list_document_block(
    page: Optional[int] = '1', per_page: Optional[conint(ge=1, le=100)] = 25
):
    """
    List all document blocks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/documents',
    description=""" Returns a list of your documents. The documents are returned sorted by creation date, with the most recent documents appearing first. """,
    tags=[
        'document_management',
        'payment_record_management',
        'partner_info_management',
    ],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def list_document(
    page: Optional[int] = '1',
    per_page: Optional[conint(ge=1, le=100)] = 25,
    block_id: Optional[int] = None,
    partner_id: Optional[int] = None,
    payment_method: Optional[PaymentMethod] = None,
    payment_status: Optional[PaymentStatus] = None,
    start_date: Optional[date_aliased] = None,
    end_date: Optional[date_aliased] = None,
    start_number: Optional[int] = None,
    end_number: Optional[int] = None,
    start_year: Optional[int] = None,
    end_year: Optional[int] = None,
):
    """
    List all documents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/documents',
    description=""" Create a new document. Returns a document object if the create is succeded. """,
    tags=['document_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def create_document(body: DocumentInsert):
    """
    Create a document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/documents/{id}',
    description=""" Retrieves the details of an existing document. """,
    tags=['document_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def get_document(id: int):
    """
    Retrieve a document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/documents/{id}/cancel',
    description=""" Cancel a document. Returns a cancellation document object if the cancellation is succeded. """,
    tags=['document_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def cancel_document(id: int):
    """
    Cancel a document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/documents/{id}/create-from-proforma',
    description=""" Create a new document from proforma. Returns a document object if the create is succeded. """,
    tags=['document_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def create_document_from_proforma(id: int):
    """
    Create a document from proforma.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/documents/{id}/download',
    description=""" Download a document. Returns a document in PDF format. """,
    tags=['document_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def download_document(id: int):
    """
    Download a document in PDF format.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/documents/{id}/online-szamla',
    description=""" Retrieves the details of an existing document status. """,
    tags=['document_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def get_online_szamla_status(id: int):
    """
    Retrieve a document Online Sz√°mla status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/documents/{id}/payments',
    description=""" Delete all exist payment history on document. """,
    tags=['payment_record_management', 'document_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def delete_payment(id: int):
    """
    Delete all payment history on document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/documents/{id}/payments',
    description=""" Retrieves the details of payment history an existing document. """,
    tags=['payment_record_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def get_payment(id: int):
    """
    Retrieve a payment histroy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/documents/{id}/payments',
    description=""" Update payment history an existing document. Returns a payment history object if the update is succeded. """,
    tags=['payment_record_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def update_payment(id: int, body: DocumentsIdPaymentsPutRequest = ...):
    """
    Update payment history
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/documents/{id}/public-url',
    description=""" Retrieves public url to download an existing document. """,
    tags=['document_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def get_public_url(id: int):
    """
    Retrieve a document download public url.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/documents/{id}/send',
    description=""" Returns a list of emails, where the invoice is sent. """,
    tags=['document_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def send_document(id: int, body: SendDocument = None):
    """
    Send invoice to given email adresses.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/organization',
    description=""" Retrieves the data of organization. """,
    tags=['organization_info_retrieval'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def get_organization_data():
    """
    Retrieve a organization data.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/partners',
    description=""" Returns a list of your partners. The partners are returned sorted by creation date, with the most recent partners appearing first. """,
    tags=['partner_info_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def list_partner(
    page: Optional[int] = '1', per_page: Optional[conint(ge=1, le=100)] = 25
):
    """
    List all partners
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/partners',
    description=""" Create a new partner. Returns a partner object if the create is succeded. """,
    tags=['partner_info_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def create_partner(body: PartnerUpsert):
    """
    Create a partner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/partners/{id}',
    description=""" Delete an existing partner. """,
    tags=['partner_info_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def delete_partner(id: int):
    """
    Delete a partner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/partners/{id}',
    description=""" Retrieves the details of an existing partner. """,
    tags=['partner_info_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def get_partner(id: int):
    """
    Retrieve a partner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/partners/{id}',
    description=""" Update an existing partner. Returns a partner object if the update is succeded. """,
    tags=['partner_info_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def update_partner(id: int, body: PartnerUpsert = ...):
    """
    Update a partner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products',
    description=""" Returns a list of your products. The partners are returned sorted by creation date, with the most recent partners appearing first. """,
    tags=['product_info_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def list_product(
    page: Optional[int] = '1', per_page: Optional[conint(ge=1, le=100)] = 25
):
    """
    List all product
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/products',
    description=""" Create a new product. Returns a product object if the create is succeded. """,
    tags=['product_info_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def create_product(body: Product):
    """
    Create a product
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/products/{id}',
    description=""" Delete an existing product. """,
    tags=['product_info_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def delete_product(id: int):
    """
    Delete a product
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}',
    description=""" Retrieves the details of an existing product. """,
    tags=['product_info_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def get_product(id: int):
    """
    Retrieve a product
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/products/{id}',
    description=""" Update an existing product. Returns a product object if the update is succeded. """,
    tags=['product_info_management'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def update_product(id: int, body: Product = ...):
    """
    Update a product
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/utils/convert-legacy-id/{id}',
    description=""" Retrieves the API v3 ID. """,
    tags=['id_standardization'],
    security=[
        APIKeyHeader(name="X-API-KEY"),
    ],
)
def get_id(id: int):
    """
    Convert legacy ID to v3 ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
